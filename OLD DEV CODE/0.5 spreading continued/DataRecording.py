# Thomas Delvaux
# Data Timestamp Recording for OpenBCI EEG data

# Image import based on example from:
# https://pythonexamples.org/python-pillow-show-display-image/

# Time function info:
# https://www.pythoncentral.io/pythons-time-sleep-pause-wait-sleep-stop-your-code/


# Import necessary libraries
from PIL import Image
import time
#import subprocess
import PySimpleGUI as sg
import datetime as dt
import os
import psutil

def img_apple():
    try:  
        img = Image.open('1200px-Apple.png')  
        img.show()
        time.sleep(secs)
        img.close()
        for proc in psutil.process_iter():
            if proc.name() == "Microsoft.Photos.exe":
                proc.kill()
    except IOError: 
        pass

def img_banana():
    try:  
        img = Image.open('1200px-Banana.png')  
        img.show()
        time.sleep(secs)
        img.close()
        for proc in psutil.process_iter():
            if proc.name() == "Microsoft.Photos.exe":
                proc.kill()
    except IOError: 
        pass

# Define number of iterations to run
n = 2

# Seconds to wait
secs = 1

## ADD second button to exit out of tests when in loop
## use while loop
## Could set size to be screen size

# Session Timestamp Data File
data_file = 'DataTime_' + dt.datetime.now().strftime("%Y-%m-%d_%H-%M-%S") + '.txt'
data_file = 'DataTime.txt'

# Apple
imgfile_apple = "1200px-Apple.png"
imgname_apple = "Apple"
argstr_apple1 = '-i' + imgfile_apple
argstr_apple2 = '-n' + imgname_apple

# Banana
imgfile_banana = "1200px-Banana.png"
imgname_banana = "Banana"
argstr_banana1 = '-i' + imgfile_banana
argstr_banana2 = '-n' + imgname_banana


### Empty Window
# ONLY SUPPORTS PNG and GIF. NO JPG SUPPORT.
img_file = sg.Image(filename='1200px.png', size=(1600, 900), key='-IMAGE-')
layout = [[img_file], [sg.Button('Start'), sg.Button('Exit')]]

# Create the window
window = sg.Window('Blank', layout)

# Create an event loop
while True:
    event, values = window.read()
    print(event)
    #print(values)
    
    # End program if user closes window or presses the OK button
    if event == sg.WIN_CLOSED or event == 'Exit':
        break

    if event == 'Start':
        triggered = 1
        # Collect n sets of data
        for x in range(n):
            
            # Check if starting data collection process
            if x == 0:
                # Check if file exists
                if os.path.exists(data_file) == True:    
                    
                    # Check if file is empty
                    if os.stat(data_file).st_size == 0:
                        
                        # Adds file header if file is empty
                        with open(data_file, 'a') as file:
                            file.write('=== Autogenerated Timestamps ==='+ \
                            '\nTime\t\t\t\t\t\t| Timestamp\t\t\t| Event\n')
                
                else:
                    # Creates file and adds file header
                        with open(data_file, 'a') as file:
                            file.write('=== Autogenerated Timestamps ==='+ \
                            '\n\t\t\tTime\t\t\t|\tTimestamp\t\t|\tEvent\n')
            
            # wait for a period of time while showing blank image
            time.sleep(secs)

            # record date/time and show apple image
            with open(data_file, 'a') as file:
                file.write('%s\t| %s\t| %s Apple Start\n' %(dt.datetime.now(), \
                    dt.datetime.now().timestamp(), x))

            img_apple()
            
            with open(data_file, 'a') as file:
                file.write('%s\t| %s\t| %s Apple Finish\n' %(dt.datetime.now(), \
                    dt.datetime.now().timestamp(), x))
            
            # wait for a period of time showing blank image
            time.sleep(secs)

            # record date/time and show banana image
            with open(data_file, 'a') as file:
                file.write('%s\t| %s\t| %s Banana Start\n' %(dt.datetime.now(), \
                    dt.datetime.now().timestamp(), x))
            
            img_banana()
            
            with open(data_file, 'a') as file:
                file.write('%s\t| %s\t| %s Banana Finish\n' %(dt.datetime.now(), \
                    dt.datetime.now().timestamp(), x))

window.close()
